:javascript
  var TRANSLATIONS = #{@translations.to_json};

= render :partial => "dialogs"
= render :partial => "translation_row"
= render :partial => "translation_popout"

#translation-app
  = render :partial => "topbar"

  .container
    .page-content

      %section#translations
        .page-header
          .query-modifier
            Von
            %select(data-bind="options: ['default', 'de', 'en'], value: sourceLocale")
            nach
            %select(data-bind="options: ['de', 'en'], value: targetLocale")
          %h2
            Übersetzungen


        .row
          .span16.columns
            %form(data-bind="submit: $.noop")
              %table.translation-table.common-table.zebra-striped
                %thead
                  %tr
                    %th.spinner
                    %th.locale
                      %img(width="16" height="11" data-bind="attr: { src: targetLocaleFlag }")
                      %span(data-bind="text: targetLocale")
                    %th.info
                      %span(data-bind="text: sourceLocale")
                %tbody.noTranslations(data-bind="visible: filteredTranslations().length == 0")
                  %tr
                    %td(colspan="3") Keine übereinstimmenden Übersetzungen gefunden.
                %tbody(data-bind="template: { name: 'translation-row-tmpl', foreach: filteredTranslations, templateOptions: { app: sc } }")


:coffeescript
  $ ->
    sourceLocale = ko.observable("default")
    targetLocale = ko.observable("en")
    targetLocaleFlag = ko.dependentObservable ->
      "/images/babelabel/flags/\#{targetLocale()}.png"

    updateTranslation = (t) ->
      $.ajax
        type: "POST"
        url: "/babelabel/translations/\#{t.key}"
        data:
          _method: "PUT"
          "values[de]": t.values.de() || ""
          "values[en]": t.values.en() || ""
          "hidden": t.hidden() || false
        beforeSend: ->
          t.taskStatus("active")
          t.tasks(t.tasks() + 1)
          true
        error: ->
          t.taskStatus("alert") if t.tasks() <= 1
        success: ->
          t.taskStatus("ok") if t.tasks() <= 1
        complete: ->
          t.tasks(t.tasks() - 1)

    translations = _(TRANSLATIONS).map (item) ->
      m =
        key: item._id
        targetLocale: targetLocale
        sourceLocale: sourceLocale
        default: ko.observable(item.default || "")
        last_seen: ko.observable(item.last_seen || null)
        hidden: ko.observable(item.hidden or false)
        unhide: -> m.hidden(false)
        hide: -> m.hidden(true)
        tasks: ko.observable(0)
        taskStatus: ko.observable(false)
        features: _(["html", "markdown"]).select (i) ->
          _(item._id).endsWith("_\#{i}")
        values:
          default: ko.observable(item.default)
          de: ko.observable(item.values.de || "")
          en: ko.observable(item.values.en || "")

      m.sourceValue = ko.dependentObservable ->
        m.values[sourceLocale()]?()
      m.targetValue = ko.dependentObservable
        read: -> m.values[targetLocale()]?()
        write: (v) -> m.values[targetLocale()]?(v)

      m.lastSeenString = ko.dependentObservable ->
        xmlDate = m.last_seen()
        if xmlDate
          $.timeago(new Date(Date.parse(xmlDate)))
        else
          "nie"

      m.hidden.subscribe    -> updateTranslation(m)
      m.values.de.subscribe -> updateTranslation(m)
      m.values.en.subscribe -> updateTranslation(m)

      m.popout = ->
        tmpl = $("#translation-popout-tmpl").tmpl().prependTo("body")
        poViewModel =
          key: item._id
          defaultText: m.default()
          hidden: ko.observable(m.hidden())
          lastSeenString: m.lastSeenString
          values:
            de: ko.observable(m.values.de())
            en: ko.observable(m.values.en())
          activeTab: ko.observable('en')
          cancel: -> tmpl.remove()
          switchToTab: (tab) ->
            (-> poViewModel.activeTab(tab))
          save: ->
            m.hidden(@hidden())
            m.values.de(@values.de())
            m.values.en(@values.en())
            tmpl.remove()
        ko.applyBindings(poViewModel, tmpl[0])

      m

    viewModel =
      searchQuery: ko.observable("")
      hiddenAndUnhiddenTranslations: ko.observableArray(translations)
      activeTab: ko.observable("all")
      targetLocale: targetLocale
      targetLocaleFlag: targetLocaleFlag
      sourceLocale: sourceLocale
      switchTab: (e) ->
        $this = $(e.currentTarget)
        viewModel.activeTab($this.attr('data-tab'))

    viewModel.allTranslations = ko.dependentObservable ->
      _(viewModel.hiddenAndUnhiddenTranslations()).select (item) ->
        !item.hidden()
    viewModel.hiddenTranslations = ko.dependentObservable ->
      _(viewModel.hiddenAndUnhiddenTranslations()).select (item) ->
        item.hidden()
    viewModel.incompleteTranslations = ko.dependentObservable ->
      _(viewModel.allTranslations()).select (item) ->
        _.isBlank(item.values.de() || "") or _.isBlank(item.values.en() || "")
    viewModel.unseenTranslations = ko.dependentObservable ->
      _(viewModel.allTranslations()).select (item) ->
        !item.last_seen()

    viewModel.filteredTranslations = ko.dependentObservable ->
      q = (viewModel.searchQuery() || "").toLowerCase()

      source = switch viewModel.activeTab()
        when "all" then viewModel.allTranslations()
        when "unseen" then viewModel.unseenTranslations()
        when "incomplete" then viewModel.incompleteTranslations()
        when "hidden" then viewModel.hiddenTranslations()
        else []

      if _.isBlank(q)
        source
      else
        _(source).select (item) ->
          _([item.key, item.values.de(), item.values.en()]).detect (s) ->
            _((s || "").toLowerCase()).includes(q)


    ko.applyBindings(viewModel)

  showPopover = ($this, options) ->
    popover = $("#popover").tmpl(options).prependTo("body").hide()
    popover.find(".close").click (e) ->
      e.preventDefault()

    _.defer ->
      o = $this.offset()
      o.top += $(document).scrollTop()
      o.left += $(document).scrollLeft()

      p =
        width: popover.outerWidth()
        height: popover.outerHeight()
      d =
        width: $this.outerWidth()
        height: $this.outerHeight()

      if popover.is(".left")
        o.left -= p.width
        o.top -= p.height / 2 - d.height / 2
      else if popover.is(".right")
        o.left += d.width
        o.top -= p.height / 2 - d.height / 2
      else if popover.is(".below")
        o.left += d.width / 2 - p.width / 2
        o.top += d.height
      else if popover.is(".above")
        o.left += d.width / 2 - p.width / 2
        o.top -= p.height

      popover.offset(o).fadeIn(150)

  $ ->
    $(".bubble").live "click", (e) ->
      $this = $(this)

      if $this.is(".markdown")
        showPopover $this,
          title: "Markdown"
          content: $("#markdown-help").html()
      else
        showPopover $this,
          title: "HTML"
          content: $("#html-help").html()

    $("body").bind "click", (e) ->
      $("a.menu").parent("li").removeClass "open"
      $(".popover:visible").fadeOut
        complete: ->
          $(this).remove()

    $("a.menu").click (e) ->
      $li = $(this).parent("li").toggleClass("open")
      false

    customConfirm = (callback) ->
      $modal = $("#confirmDeleteUnseen").clone().attr('id', null)
      $modal.find("[data-action=confirm]").click (e) ->
        e.preventDefault()
        $modal.remove()
        callback()
      $modal.find("[data-action=cancel]").click (e) ->
        e.preventDefault()
        $modal.remove()
      $modal.prependTo("body").show()

    $("#resetLastSeen").click (e) ->
      e.preventDefault()
      $.ajax
        url: "/babelabel/translations/reset_last_seen"
        type: "POST"

    $("#deleteUnseen").click (e) ->
      e.preventDefault()
      customConfirm ->
        $.ajax
          url: "/babelabel/translations/delete_unseen"
          type: "POST"
